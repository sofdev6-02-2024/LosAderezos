volumes:
  dashboard-grafana-data:
    driver: local

services:
  # Traefik
  dashboard-traefik:
    image: 'traefik:v2.9'
    container_name: 'dashboard-traefik'
    restart: unless-stopped
    command:
      - '--log.level=DEBUG'
      - '--api.insecure=true'
      - '--providers.docker=true'
      - '--providers.docker.exposedbydefault=false'
      - '--entrypoints.web.address=:80'
      - '--entrypoints.web.http.redirections.entrypoint.to=websecure'
      - '--entryPoints.web.http.redirections.entrypoint.scheme=https'
      - '--entrypoints.websecure.address=:443'
      - '--certificatesresolvers.myresolver.acme.tlschallenge=true'
      - '--certificatesresolvers.myresolver.acme.email=myemail@test.com'
      - '--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json'
    ports:
      - '8080:80'
      - '443:443'
      - '8082:8081'
    volumes:
      - './letsencrypt:/letsencrypt'
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
    networks:
      - dashboard

  # Grafana
  dashboard-grafana:
    image: grafana/grafana-oss:10.4.12-ubuntu
    container_name: dashboard-grafana
    restart: unless-stopped
    ports:
      - "3005:3000"
    environment:
      - GF_LOG_LEVEL=${LOG_LEVEL}
      - GF_PATHS_CONFIG
      - GF_RENDERING_SERVER_URL
      - GF_RENDERING_CALLBACK_URL
      - GF_LOG_FILTERS
    volumes:
      - ./grafana-config/config.ini:/etc/grafana/config.ini
      - ./grafana-config/provisioning/:/etc/grafana/provisioning/
      - dashboard-grafana-data:/var/lib/grafana/
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.dashboard-grafana.rule=Host(`${GF_HOST}`)'
      - 'traefik.http.routers.dashboard-grafana.entrypoints=websecure'
      - 'traefik.http.routers.dashboard-grafana.tls.certresolver=myresolver'
      - 'traefik.port=3005'
      - "traefik.http.middlewares.no-xframe.headers.customresponseheaders.X-Frame-Options="
      - "traefik.http.middlewares.no-xframe.headers.customresponseheaders.Content-Security-Policy="
    networks:
      - dashboard

  # Renderer
  dashboard-renderer:
    container_name: dashboard-renderer
    image: grafana/grafana-image-renderer:latest
    ports:
      - 8081:8081
    depends_on:
      - dashboard-grafana
    networks:
      - dashboard

  # FRONTEND
  frontend:
    container_name: frontend
    build: 
      context: ${CONTEXT}
      dockerfile: ./infrastructure/environments/frontend/Dockerfile
    ports:
      - "5173:5173"
    depends_on:
      api-gateway:
        condition: service_started
    networks:
      - dashboard

  # API GATEWAY
  api-gateway:
    container_name: api
    build:
      context: ${CONTEXT}
      dockerfile: ./infrastructure/environments/api-gateway/Dockerfile
    ports:
      - "8000:80"
    depends_on:
      product-management-service:
        condition: service_started
      user-management-service:
        condition: service_started
      user-authentication-service:
        condition: service_started
    networks:
      - dashboard

  # PRODUCT MANAGEMENT
  product-management-service:
    container_name: ProductManagementService
    build: 
      context: ${CONTEXT}
      dockerfile: ./infrastructure/environments/product-management/Dockerfile
    environment:
      ASPNETCORE_HTTP_PORTS: 80
    depends_on:
      product-management-database:
        condition: service_healthy
    networks:
      - dashboard
  
  product-management-database:
    container_name: ProductManagementDB
    image: mysql:9
    environment:
      - MYSQL_ROOT_PASSWORD=${PRODUCT_MANAGEMENT_DB_PASSWORD}
      - MYSQL_DATABASE=${PRODUCT_MANAGEMENT_DB_SCHEMA}
    volumes:
      - ${CONTEXT}/infrastructure/environments/product-management/productDB/init-db:/docker-entrypoint-initdb.d
      - ${CONTEXT}/infrastructure/environments/product-management/productDB/Data/Hipermaxi:/var/lib/mysql-files/
    healthcheck:
      test: ["CMD-SHELL", "mysql -u root -p${PRODUCT_MANAGEMENT_DB_PASSWORD} --execute 'SELECT @@GLOBAL.version;'"]
      interval: 3s
      retries: 10
    networks:
      - dashboard

  # USER MANAGEMENT  
  user-management-service:
    container_name: UserManagementService
    build:
      context: ${CONTEXT}
      dockerfile: ./infrastructure/environments/user-management/Dockerfile
    environment:
      ASPNETCORE_HTTP_PORTS: 80
    depends_on:
      user-management-database-MySQL:
        condition: service_healthy
    networks:
      - dashboard

  user-management-database-MySQL:
    container_name: UserManagementDBMySQL
    image: mysql:9
    environment:
      - MYSQL_ROOT_PASSWORD=${USER_MANAGEMENT_DB_MySQL_PASSWORD}
      - MYSQL_DATABASE=${USER_MANAGEMENT_DB_MySQL_SCHEMA}
    volumes:
      - ${CONTEXT}/infrastructure/environments/user-management/userDB/init-db:/docker-entrypoint-initdb.d 
      - ${CONTEXT}/infrastructure/environments/user-management/userDB/Data:/var/lib/mysql-files/
    healthcheck:
      test: ["CMD-SHELL", "mysql -u root -p${USER_MANAGEMENT_DB_MySQL_PASSWORD} --execute 'SELECT @@GLOBAL.version;'"]
      interval: 3s
      retries: 10
    networks:
      - dashboard

  # USER AUTHENTICATION
  user-authentication-service:
    container_name: AuthenticationService
    build:
      context: ${CONTEXT}
      dockerfile: ./infrastructure/environments/third-authentication/Dockerfile
    depends_on:
      user-management-service:
        condition: service_started
    networks:
      - dashboard

networks:
  dashboard:
    driver: bridge
    ipam:
      config:
        - subnet: 172.1.0.0/16
    driver_opts:
      com.docker.network.driver.mtu: 1400
